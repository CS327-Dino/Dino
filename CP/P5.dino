?:
Author: Kalash Kankaria

Write a program that generates a random password
that is 8 characters long, has at least one uppercase,
has at least one lowercase, and has at least one digit.
Write a linear congruential generator for generating
the random number.

:?
?:
assign dict = {1:'a', 2:'b', 3:'c', 4:'d', 5:'e', 6:'f', 7:'g', 8:'h', 9:'i', 10:'j', 11:'k', 12:'l', 13:'m', 14:'n', 15:'o', 16:'p', 17:'q', 18:'r', 19:'s', 20:'t', 21:'u', 22:'v', 23:'w', 24:'x', 25:'y', 26:'z'};

assign dict_caps = {1:'A', 2:'B', 3:'C', 4:'D', 5:'E', 6:'F', 7:'G', 8:'H', 9:'I', 10:'J', 11:'K', 12:'L', 13:'M', 14:'N', 15:'O', 16:'P', 17:'Q', 18:'R', 19:'S', 20:'T', 21:'U', 22:'V', 23:'W', 24:'X', 25:'Y', 26:'Z'};
:?


    

func linearCongruentialMethod_num(Xo, m, a, c, num)
    assign arr = [];
    arr.add(Xo);
    assign i = 1;
    assign temp = 0;
    iterate(i=1; i<num; i+1)
        temp = (a*arr[i-1] + c) % m;
        arr.add(temp);
    end
    return arr;
end

func linearCongruentialMethod_alpha(Xo, m, a, c, num)
    assign arr = [];
    arr.add(Xo);
    assign i = 1;
    assign temp = 0;
    iterate(i=1; i<num; i+1)
        temp = (a*arr[i-1] + c) % m;
        arr.add(temp);
    end
    return arr;
end

assign Xo = 42;
assign m = 10;
assign a = 17;
assign c = 5;
assign num = 10;

assign Xo_2 = 3;
assign m_2 = 26;
assign a_2 = 17;
assign c_2 = 5;
assign num_2 = 10;


assign rand_num  = linearCongruentialMethod_num(Xo, m, a, c, num);
echo(rand_num);
?:
assign rand_char = linearCongruentialMethod_alpha(Xo_2, m_2, a_2, c_2, num_2);
iterate(assign i=0; i<num_2; i+1)
    echo(dict_caps[rand_char[i]]);
end
:?

assign i=0;
assign pass = "";
loop(i<8)
    assign pass1 = rand_num[i];
    pass = pass + pass1.to_string;
    i = i+1;
end

echo(pass);
